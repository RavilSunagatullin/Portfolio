{
  "back": "<== Назад",
  "Just_input": "Просто input",
  "road": "Road.map()",
  "guides": "Гайды",
  "articles": "Статьи",
  "slogan": "Простой сервис для изучения програмирования",
  "chooseGuide": "Выбрать гайд",
  "author": "Автор",
  "about": "О проекте",
  "article-why-us": {
    "title": "О нашем сервисе",
    "title-helper": "Небольшая статья про нас.",
    "paragraph_1": "Road.map() это сервис позволяющий быстро узнать и найти нужные темы по программированию , а также мы предоставляем  их  краткое описание.",
    "paragraph_2": "Мы не учим программированию, мы лишь даем необходимый вектор для развития облегчая путь новичка.",
    "paragraph_3": "Чем мы лучше других подобных сервисов: cтруктурой подачи данных,  объемом различных статей, удобством настройки среды, отсутствием дополнительных регистраций и заморочек.",
    "paragraph_4": "Данный сервис написан на Vue js и полностью open source. ",
    "paragraph_5": "Почему Vue? Vue прогрессивный js фреймворк, при этом он  использует подход html first и декларативен . Vue хорошо подходит для написания небольших стартапов и приложений, при этом в отличии от svelte чувствует себя хорошо и на средних по размерам проектам. Что касается больших проектов там себя отлично проявляют корпоративный Angular и универсальный React."
  },
  "greetings": {
    "article-greeting": "Road.map(Статьи)",
    "article-greeting-helper": "Эта страница сборник всех наших статей",
    "guides-greeting": "Road.map(Гайды)",
    "guides-greeting-helper": "Эта страница сборник всех наших гайдов"
  },
  "technologies": {
    "dev-dir": "Направление разработки",
    "technologies": "Технологии",
    "frontend": "Frontend",
    "backend": "Backend",
    "kotlin": "Mobile kotlin",
    "swift": "Mobile swift",
    "qa": "QA  Инженер",
    "ux": "UX Дизайн",
    "vue-js": "Vue Js",
    "laravel": "Laravel",
    "Kotlin": "Kotlin",
    "Swift": "Swift",
    "html": "Html",
    "js": "JavaScript",
    "css": "Css",
    "react": "React",
    "angular": "Angular"
  },
  "articles-titles": {
    "about": "Что такое Road.map() ?",
    "how-learning-faster": "How learning faster ?",
    "what-is-mobile-develop": "What is Mobile develop ?",
    "which-backend-framework-is-best": "Which Backend framework is best?",
    "what-dev-ops-developer-doing": "What Dev ops developer doing ?"
  },
  "frontend-page": {
    "article_1-title": "Что такое frontend?",
    "paragraph_1-1": "Фронтенд-разработка — это разработка визуальных и интерактивных элементов веб-сайта, с которыми пользователи взаимодействуют напрямую. Это комбинация HTML, CSS и JavaScript, где HTML обеспечивает структуру, CSS — стиль и макет, а JavaScript — динамическое поведение и интерактивность.",
    "paragraph_1-2": "Как интерфейсный разработчик, вы будете нести ответственность за создание пользовательского интерфейса веб-сайта, чтобы убедиться, что он хорошо выглядит и прост в использовании, уделяя особое внимание принципам дизайна и пользовательскому опыту. Вы будете тесно сотрудничать с дизайнерами, бэкенд-разработчиками и руководителями проектов, чтобы убедиться, что конечный продукт соответствует потребностям клиента и предоставляет конечным пользователям наилучшие возможности.",
    "article_2-title": "Основы",
    "article_2-label": "Больше о основах",
    "paragraph_2-1": "HTML не является языком программирования — это язык разметки, и используется, чтобы сообщать вашему браузеру, как отображать веб-страницы, которые вы посещаете. Он может быть сложным или простым, в зависимости от того, как хочет веб-дизайнер. HTML состоит из ряда элементов, которые вы используете, чтобы вкладывать или оборачивать различные части контента, чтобы заставить контент отображаться или действовать определённым образом.",
    "paragraph_2-2": "Как и HTML, CSS на самом деле не является языком программирования. Это не язык разметки - это язык таблицы стилей. ",
    "paragraph_2-3": "JavaScript – это язык программирования, который добавляет интерактивность на ваш веб-сайт (например: игры, отклик при нажатии кнопок или при вводе данных в формы, динамические стили, анимация). ",
    "article_3-title": "Git",
    "article_3-label": "Больше о Git",
    "paragraph_3-1": "Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов.",
    "paragraph_3-2": "С помощью Git-a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.",
    "paragraph_3-3": "Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.",
    "article_4-title": "Фреймворки",
    "article_4-label": "Больше о фреймворках",
    "paragraph_4-1": "Фронтенд-фреймворки облегчают работу веб-разработчиков, предоставляя им повторно используемые модули кода, стандартизированные интерфейсные технологии и готовые интерфейсные блоки, которые упрощают разработку приложений и пользовательских интерфейсов без необходимости кодировать каждую функцию или объект с нуля.",
    "paragraph_4-2": "Поскольку большинство веб-приложений имеют очень похожую, а иногда и идентичную структуру, интерфейсные фреймворки были разработаны для предоставления общей структуры, поэтому разработчикам не нужно писать все с нуля",
    "paragraph_4-3": "Вопрос о том, какой интерфейсный фреймворк является лучшим на рынке, всегда вызывал споры. Однако недавние исследования и опросы показывают, что в настоящее время наиболее популярными интерфейсными фреймворками являются React, Vue, Angular, Svelte. ",
    "article_5-title": "Остальные инструменты",
    "article_5-label": "Больше о инструментах",
    "paragraph_5-1": "Фреймворк CSS предоставляет пользователю полнофункциональную таблицу стилей CSS, позволяющую создавать веб-страницы, просто кодируя HTML с соответствующими классами, структурой и идентификаторами.",
    "paragraph_5-2": "Средство проверки типов помогает разработчикам писать код с меньшим количеством ошибок, добавляя типы в свой код, пытаясь отловить ошибки типов в вашем коде, а затем удаляя их во время компиляции.",
    "paragraph_5-3": "Распространенное использование средств запуска задач включает в себя многочисленные задачи разработки, такие как: запуск серверов разработки, компиляция кода (например, SCSS в CSS) и запуск линтеров, обслуживание файлов с локального порта на вашем компьютере.",
    "paragraph_5-4": "Препроцессоры CSS — это языки сценариев, которые расширяют возможности CSS по умолчанию.",
    "article_6-title": "Тесты",
    "article_6-label": "Больше о тестах",
    "paragraph_6-1": "Перед доставкой приложения пользователям необходимо убедиться, что оно соответствует требованиям, для которых оно было разработано, и что оно не делает каких-либо странных, непреднамеренных действий (так называемых «ошибок»).",
    "paragraph_6-2": "Cуществуют множество видов тестов: unit/интеграционные/e2e тесты, пирамиды тестирования, красно‑зелёные рефакторы, TDD и BDD, скриншот‑тестирования.",
    "article_7-title": "Формы web приложений",
    "article_7-label": "Больше о формах web приложений",
    "paragraph_7-1": "Генератор статических сайтов — это инструмент, который создает полноценный статический HTML-сайт на основе исходных данных и набора шаблонов. По сути, генератор статических сайтов автоматизирует задачу кодирования отдельных HTML-страниц и заранее готовит эти страницы для пользователей. Поскольку эти HTML-страницы предварительно созданы, они могут очень быстро загружаться в браузерах пользователей.",
    "paragraph_7-2": "Рендеринг на стороне сервера относится к процессу, в ходе которого сторона службы завершает объединение HTML-структуры страницы, отправляет ее в браузер, а затем привязывает статус и события, чтобы она стала полностью интерактивной страницей.",
    "paragraph_7-3": "Прогрессивные веб-приложения (PWA) — это веб-сайты, которые постепенно улучшаются, чтобы функционировать как установленные собственные приложения на поддерживающих платформах, а в других браузерах — как обычные веб-сайты.",
    "paragraph_7-4": "Некоторое время назад разработка мобильного приложения с использованием JavaScript была невозможна. Но теперь разработчики JavaScript могут создавать мобильные и десктопные приложения, используя свои знания для веб-разработки»."
  },
  "base-frontend": {
    "article_1-title": "Html",
    "paragraph_1": "HTML означает язык гипертекстовой разметки. Он используется во внешнем интерфейсе и придает структуру веб-странице, которую вы можете стилизовать с помощью CSS и сделать интерактивной с помощью JavaScript.",
    "article_1-label": "Больше о html",
    "article_2-title": "Css",
    "paragraph_2": "CSS или каскадные таблицы стилей — это язык, используемый для оформления внешнего интерфейса любого веб-сайта. CSS является краеугольным камнем технологии World Wide Web, наряду с HTML и JavaScript.",
    "article_2-label": "Больше о css",
    "article_3-title": "JavaScript",
    "paragraph_3": "JavaScript позволяет добавить интерактивности на ваши страницы. Типичными примерами, которые вы, возможно, видели на веб-сайтах, являются слайдеры, интерактивные клики, всплывающие окна и так далее.",
    "article_3-label": "Больше о JavaScript"
  },
  "html": {
    "article_1-title": "Анатомия html",
    "paragraph_1": "Главными частями нашего элемента являются: Открывающий тег, Закрывающий тег, Контент, Элемент.",
    "paragraph_1-2": "Открывающий тег: Состоит из имени элемента, заключённого в открывающие и закрывающие угловые скобки. Открывающий тег указывает, где элемент начинается или начинает действовать.",
    "paragraph_1-3": "Закрывающий тег: Это то же самое, что и открывающий тег, за исключением того, что он включает в себя косую черту перед именем элемента. Закрывающий элемент указывает, где элемент заканчивается, в данном случае — где заканчивается абзац. Отсутствие закрывающего тега является одной из наиболее распространённых ошибок начинающих и может приводить к странным результатам.",
    "paragraph_1-4": "Контент: Это контент элемента, который в данном случае является просто текстом.",
    "paragraph_1-5": "Элемент: Открывающий тег, закрывающий тег и контент вместе составляют элемент.",
    "paragraph_1-6": "Атрибуты содержат дополнительную информацию об элементе, которую вы не хотите показывать в фактическом контенте. ",
    "article_2-title": "Семантический HTML",
    "paragraph_2": "Семантический элемент четко описывает свое значение как для браузера, так и для разработчика. В HTML семантический элемент — это тип элементов, которые можно использовать для определения различных частей веб-страницы, таких как <form>, <table>, <article>, <header>, <footer> и т.д.",
    "article_3-title": "Формы и проверки",
    "paragraph_3": "Перед отправкой данных на сервер важно убедиться, что все необходимые элементы управления формы заполнены в правильном формате. Это называется проверкой формы на стороне клиента и помогает убедиться, что отправленные данные соответствуют требованиям, изложенным в различных элементах управления формой.",
    "article_4-title": "Доступность",
    "paragraph_4": "Веб-доступность означает, что веб-сайты, инструменты и технологии спроектированы и разработаны таким образом, чтобы люди с ограниченными возможностями могли легко ими пользоваться.",
    "article_5-title": "Основы SEO",
    "paragraph_5": "SEO или поисковая оптимизация — это метод, используемый для оптимизации вашего веб-сайта для повышения рейтинга в поисковых системах, таких как Google, Bing и т. д."
  },
  "css": {
    "article_1-title": "Анатомия набора правил CSS",
    "paragraph_1": "Селектор: это имя элемента HTML в начале набора правил. Он определяет элемент(ы) для стиля. Чтобы стилизовать другой элемент, измените селектор.",
    "paragraph_1-2": "Объявление: указывает, какие свойства элемента вы хотите стилизовать.",
    "paragraph_1-3": "Свойства: это способы, которыми вы можете стилизовать HTML-элемент. В CSS вы выбираете, какие свойства вы хотите изменить в правиле.",
    "paragraph_1-4": "Значение свойства: справа от свойства — после двоеточия — указано значение свойства. Это выбирает одно из многих возможных проявлений для данного свойства.",
    "article_2-title": "Изготовление макетов",
    "paragraph_2": "Float, grid, flexbox, position, display и box model являются одними из ключевых тем, которые используются для создания макетов.",
    "paragraph_2-2": "CSS-свойство float помещает элемент слева или справа от его контейнера, позволяя тексту и встроенным элементам оборачиваться вокруг него. Элемент удаляется из обычного потока страницы, но все еще остается частью потока (в отличие от абсолютного позиционирования).",
    "paragraph_2-3": "Компоновка сетки CSS вводит двумерную систему сетки в CSS. Сетки можно использовать для разметки основных областей страницы или небольших элементов пользовательского интерфейса.",
    "paragraph_2-4": "Модуль макета гибкого блока, обычно называемый flexbox, был разработан как модель одномерного макета и как метод, который может предложить распределение пространства между элементами в интерфейсе и мощные возможности выравнивания.",
    "paragraph_2-5": "Свойство CSS position определяет, как элемент позиционируется в документе. Свойства top, right, bottom и left определяют окончательное расположение позиционируемых элементов.",
    "paragraph_2-6": "CSS-свойство display определяет, будет ли элемент рассматриваться как блок или встроенный блок, а также макет, используемый для его дочерних элементов, например непрерывный макет, сетка или гибкий.",
    "article_3-title": "Отзывчивый веб-дизайн",
    "paragraph_3": "Отзывчивый веб-дизайн — это техника, которая позволяет вашим веб-страницам хорошо выглядеть на всех размерах экрана. Существуют определенные методы, используемые для достижения этого, например. Медиа-запросы CSS, процентная ширина, минимальная или максимальная ширина, высота и т. д.",
    "paragraph_3-2": "Медиа-запросы позволяют применять стили CSS в зависимости от общего типа устройства (например, печать или экран) или других характеристик, таких как разрешение экрана или ширина области просмотра браузера."
  },
  "js": {
    "article_1-title": "Предисловие",
    "paragraph_1": "Возможно, JavaScript сложнее изучить, чем связанные с ним технологии, такие как HTML и CSS. Прежде чем приступать к изучению JavaScript, вам настоятельно рекомендуется сначала ознакомиться как минимум с этими двумя технологиями, а возможно, и с другими. ",
    "article_2-title": "Синтаксис и основные конструкции",
    "paragraph_2": "JavaScript — язык с учетом регистра. Это означает, что ключевые слова, имена переменных и функций, а также любые другие языковые идентификаторы всегда должны содержать один и тот же набор прописных и строчных букв.",
    "paragraph_2-2": "JavaScript игнорирует пробелы, которые могут присутствовать между токенами в программе. Кроме того, JavaScript также по большей части игнорирует символы новой строки. Поэтому пробелы и символы новой строки можно использовать без ограничений в исходных текстах программ для форматирование и придание им читаемого вида.",
    "paragraph_2-3": "Как и другие языки программирования, JavaScript использует точку с запятой (;) для отделения инструкций друг от друга. Использование точки с запятой необходимо, чтобы прояснить намерения программиста: без этого разделителя можно перепутать конец одной оператор для начала следующего, и наоборот.",
    "article_3-title": "Типы данных",
    "paragraph_3": "Типы данных в JavaScript можно разделить на две категории: простые типы и объекты. Категория простых типов в JavaScript включает числа, текстовые строки и логические (или логические) значения.",
    "paragraph_3-2": "Специальные значения null и undefined являются элементарными значениями, но они не относятся к числам, строкам или логическим значениям. Каждое из них определяет только одно значение своего специального типа.",
    "paragraph_3-3": "Любое значение в JavaScript, которое не является числом, строкой, логическим значением или специальным значением null или undefined, является объектом. Объект (то есть член типа данных объекта) представляет собой набор свойств, каждое из которых имеет имя и значение (либо простого типа, такого как число или строка, либо объектного типа).",
    "paragraph_3-4": "Обычный объект JavaScript представляет собой неупорядоченный набор именованных значений. Кроме того, в JavaScript есть объект особого типа, известный как массив, который представляет собой упорядоченный набор пронумерованных значений. JavaScript имеет специальный синтаксис для работы с массивы.",
    "article_4-title": "Манипулирование DOM",
    "paragraph_4": "Объектная модель документа (DOM) — это программный интерфейс, созданный для документов HTML и XML. Он представляет собой страницу, которая позволяет программам и сценариям динамически обновлять структуру, содержимое и стиль документа. С помощью DOM мы можем легко получать доступ и управлять тегами, идентификаторами, классами, атрибутами и т. д.",
    "article_5-title": "Fetch API",
    "paragraph_5": "Ajax — это метод, который позволяет нам асинхронно отправлять и получать данные с серверов, например, обновлять профиль пользователя или асинхронно получать список искомых продуктов без перезагрузки страницы.",
    "article_6-title": "Современный JavaScript",
    "paragraph_6": "ECMAScript 2015 или ES2015 — это значительное обновление языка программирования JavaScript. Это первое крупное обновление языка после ES5, стандартизированного в 2009 году. Вам следует обратить внимание на функции, представленные в ES6 и последующих версиях.",
    "article_7-title": "Концепции JavaScript",
    "paragraph_7": "Подъем JavaScript — это процесс, в ходе которого интерпретатор, по-видимому, перемещает объявление функций, переменных или классов в верхнюю часть своей области до выполнения кода",
    "paragraph_7-2": "Всплытие событий — это концепция в DOM (объектная модель документа). Это происходит, когда элемент получает событие, и это событие всплывает (или, можно сказать, передается или распространяется) своему родителю и предку. элементы в дереве DOM, пока не дойдет до корневого элемента.",
    "paragraph_7-3": "Область видимости определяет видимость или доступность переменной (другого ресурса) в области действия вашего кода.",
    "paragraph_7-4": "Прототипы — это механизм, с помощью которого объекты JavaScript наследуют свойства друг друга. ",
    "paragraph_7-5": "Важным аспектом веб-компонентов является инкапсуляция — возможность сохранить структуру разметки, стиль и поведение скрытыми и отделенными от остального кода на странице, чтобы разные части не конфликтовали, а код можно было поддерживается в чистоте и чистоте. API Shadow DOM является ключевой частью этого, обеспечивая способ присоединения скрытого отдельного DOM к элементу. ",
    "paragraph_7-6": "Строгий режим JavaScript — это способ подписаться на ограниченный вариант JavaScript, тем самым неявно отказываясь от 'небрежного режима'. Строгий режим — это не просто подмножество: он намеренно отличается семантикой от обычного Браузеры, не поддерживающие строгий режим, будут запускать код строгого режима с поведением, отличным от браузеров, которые его поддерживают, поэтому не полагайтесь на строгий режим без функционального тестирования для поддержки соответствующих аспектов строгого режима.Код строгого режима и нестрогий режим код может сосуществовать, поэтому скрипты могут постепенно переходить в строгий режим»."
  }
}
